#!/usr/bin/env node
// vim: set ft=javascript:

// Adopted from example at https://www.npmjs.com/package/source-map-concat

var fs = require("fs");
var path = require("path");
var concat = require("source-map-concat");

var resolveSourceMapSync = require("source-map-resolve").resolveSourceMapSync;
var createDummySourceMap = require("source-map-dummy");

// TODO could take from options, but let's be lazy for now
var targetFile = 'downstream.js';

var jsFiles = process.argv.slice(2);

jsFiles = jsFiles.map(function(file) {
	return {
		source:	file,
		code: fs.readFileSync(file).toString()
	};
});

jsFiles.forEach(function(file) {
	var previousMap = resolveSourceMapSync(file.code, file.source, fs.readFileSync);
	if (previousMap) {
		file.map = previousMap.map;
		file.sourcesRelativeTo = previousMap.sourcesRelativeTo;
	} else {
		file.map = createDummySourceMap(file.code, {source: file.source, type: "js"});
	}
});

// function wrap(node, file) {
//	 node.prepend("void function(){\n// File: " + file.source + "\n")
//	 node.add("}();")
// }
//
var output = targetFile;

var concatenated = concat(jsFiles, {
	delimiter: "\n",
	// process: wrap,
	mapPath: output + ".map"
});

concatenated.prepend("// downstream.js\n");
concatenated.add("\n// end of downstream.js");
concatenated.add("\n//# sourceMappingURL=" + targetFile + ".map");

var result = concatenated.toStringWithSourceMap({
	file: path.basename(output)
});

fs.writeFileSync(output, result.code);
fs.writeFileSync(output + ".map", result.map.toString());
